const int maxn = 10004 * 51;
int n;
char s[1000006], str[55];
int ans ;
struct AC {
    int ch[maxn][26], tot, f[maxn];
    int is[maxn];
    int idx(char c) {
        return c-'a';
    }
    int new_node() {
        is[tot] = 0;
        memset(ch[tot], 0, sizeof(ch[tot]));
        return tot++;
    }
    void init() {
        tot = 0;
        new_node();
    }
    void insert(char *s, int pos) {
        int i, j, u = 0, n = strlen(s);
        for(i = 0; i < n; i++) {
            int k = idx(s[i]);
            if(!ch[u][k]) ch[u][k] = new_node();
            u = ch[u][k];
        }
        is[u] ++ ;
    }
    void getfail() {
        int i, j, u, v;
        queue <int> q;
        f[0] = 0;
        for(i = 0; i < 26; i++) {
            u = ch[0][i];
            if(u) {
                f[u] = 0;
                q.push(u);
            }
        }
        while(!q.empty()) {
            u = q.front();
            q.pop();
            for(i = 0; i < 26; i++) {
                v = ch[u][i];
                if(!v) {
                    ch[u][i] = ch[f[u]][i];  // 这行是AC自动机改造： 没改造的是这样的 if(!v) continue;
                    continue;
                }
                j = f[u];
                while(j && !ch[j][i]) j = f[j];
                f[v] = ch[j][i];
                q.push(v);
            }
        }
    }
    void find(char *s ) {
        int len , j , u ;
        len = strlen(s);
        u = 0 ;
        for(int i = 0 ; i < len ; i ++ ) {
            j = idx(s[i]);
            u = ch[u][j];
            for(int k = u ; k ; k = f[k]) {
                if(is[k]) {
                    ans += is[k] ;
                    is[k] = 0 ;
                }
            }
        }
    }
} ac;