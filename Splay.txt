#define inf 0x3f3f3f3f
#define keyTree (ch[ ch[root][1] ][0])

const int maxn = 222222;
int _min;
int le;
struct SplayTree {
    int sz[maxn];
    int ch[maxn][2];
    int pre[maxn];
    int root , top1 , top2;
    int ss[maxn] , que[maxn];

    void Rotate(int x,int f) {
        int y = pre[x];
        push_down(y);
        push_down(x);
        ch[y][!f] = ch[x][f];
        pre[ ch[x][f] ] = y;
        pre[x] = pre[y];
        if(pre[x]) ch[ pre[y] ][ ch[pre[y]][1] == y ] = x;
        ch[x][f] = y;
        pre[y] = x;
        push_up(y);
    }
    void Splay(int x,int goal) {
        push_down(x);
        //puts("zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz");
        while(pre[x] != goal) {
            int y = pre[x], z = pre[y];
            push_down(z);    push_down(y);    push_down(x);
            if(pre[pre[x]] == goal) {
                Rotate(x , ch[pre[x]][0] == x);
            } else {
                int y = pre[x] , z = pre[y];
                int f = (ch[z][0] == y);
                if(ch[y][f] == x) {
                    Rotate(x , !f) , Rotate(x , f);
                } else {
                    Rotate(y , f) , Rotate(x , f);
                }
            }
        }
        push_up(x);
        if(goal == 0) root = x;
    }
    void RotateTo(int k,int goal) {//把第k位的数转到goal下边
        int x = root;
        push_down(x);
        while(sz[ ch[x][0] ] != k) {
            // printf("x = %d k = %d sz[x] = %d\n",x,k,sz[x]);
            if(k < sz[ ch[x][0] ]) {
                x = ch[x][0];
            } else {
                k -= (sz[ ch[x][0] ] + 1);
                x = ch[x][1];
            }
            push_down(x);
        }
        Splay(x,goal);
    }

    //以上一般不修改//////////////////////////////////////////////////////////////////////////////
    void debug() {
        printf("%d\n",root);
        Treaval(root);
    }
    void Treaval(int x) {
        if(x) {
            Treaval(ch[x][0]);
            printf("结点%2d:左儿子 %2d 右儿子 %2d 父结点 %2d size = %2d ,val = %2d\n",x,ch[x][0],ch[x][1],pre[x],sz[x],val[x]);
            Treaval(ch[x][1]);
        }
    }
    //以上Debug
    //以下是题目的特定函数:
    void NewNode(int &x,int c) {
        x = ++top1;
        ch[x][0] = ch[x][1] = pre[x] = 0;
        sz[x] = 1;
        val[x] = c;
        add[x] = 0;
    }
    //把延迟标记推到孩子
    void push_down(int x) {
        if(add[x]) {
            val[ ch[x][0] ] += add[x];
            val[ ch[x][1] ] += add[x];
            add[ ch[x][0] ] += add[x];
            add[ ch[x][1] ] += add[x];
            add[x] = 0;
        }
        return ;
    }
    //把孩子状态更新上来
    void push_up(int x) {
        sz[x] = 1 + sz[ ch[x][0] ] + sz[ ch[x][1] ];
    }
    /*初始化*/
    void makeTree(int &x,int l,int r,int f) {
        if(l > r) return ;
        int m = (l + r)>>1;
        NewNode(x , num[m]);		/*num[m]权值改成题目所需的*/
        makeTree(ch[x][0] , l , m - 1 , x);
        makeTree(ch[x][1] , m + 1 , r , x);
        pre[x] = f;
        push_up(x);
    }
    void clear() {
        cnt = 0 ;
        ch[0][0] = ch[0][1] = pre[0] = sz[0] = 0;
        add[0] = val[0] = 0;
        root = top1 = 0;
        //为了方便处理边界,加两个边界顶点
        NewNode(root , -inf);
        NewNode(ch[root][1] , inf);
        pre[top1] = root;
        sz[root] = 2;
    }
    void init(int pos,int n) {
        clear();
        cnt =  n;
        RotateTo(pos , 0 );
        RotateTo(pos + 1, root);
        makeTree(keyTree , 1 , n   , ch[root][1]);
        push_up(ch[root][1]);
        push_up(root);
    }
    int find_low(int x) { //小于x的最大值位置
        int s=0,p=root;
        while(p) {
            push_down(p);
            if(val[p]<=x) s=p,p=ch[p][1];
            else p=ch[p][0];
        }
        return s;
    }
    int find_up(int x) { //大于x的最小值位置
        int s=0,p=root;
        while(p) {
            push_down(p);
            if(val[p]>=x) s=p,p=ch[p][0];
            else p=ch[p][1];
        }
        return s;
    }
    void insert(int value) {
        cnt ++ ;
        int k  = 0 ,x = root;
        while(x) {
            push_down(x);
            if(val[x] > value)
                x = ch[x][0];
            else {
                k += (sz[ch[x][0]] + 1);
                x = ch[x][1];
            }
        }
        RotateTo(k - 1 , 0);
        RotateTo(k , root);
        NewNode(keyTree,value);
        pre[keyTree] = ch[root][1];
        // printf("push    %d %d\n",ch[root][1],root);
        // push_up(ch[root][1]);
        push_up(root);
    }
    void del(int value) {
        int k  = 0 ,x = root;
        while(x) {
            push_down(x);
            if(val[x] >= value)
                x = ch[x][0];
            else {
                k += (sz[ch[x][0]] + 1);
                x = ch[x][1];
            }
        }
        RotateTo(0 , 0);
        RotateTo(k , root);
        int key = keyTree;
        keyTree = 0;
        // push_up(ch[root][1]);
        push_up(root);
        cnt -= sz[key];
        le += sz[key];
        //erase(keyTree);
    }
    void update(int value) {
        RotateTo(0,0);
        RotateTo(cnt + 1, root);
        val[keyTree] += value;
        add[keyTree] += value;
        push_up(root);
    }
    int query(int k) {
        if(cnt < k) return -1;
        k = cnt - k + 1;
        RotateTo(k - 1, 0);
        RotateTo(k + 1, root);
        return val[keyTree];
    }

    int cnt ;
    /*这是题目特定变量*/
    int num[maxn];
    int val[maxn];
    int add[maxn];
} spt;